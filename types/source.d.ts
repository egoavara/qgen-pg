export declare const QueryHeader = "// qgen query ...\nimport type pg from 'pg';\n";
export declare const HeaderStart = "// qgen type ...\nimport pg from 'pg';\nconst builtinOids: number[] = Object.values(pg.types.builtins);\n\n// \uC0AC\uC6A9\uC790 \uC785\uB825\uC740 \uBC18\uB4DC\uC2DC \uC544\uB798\uC758 \uBE14\uB7ED \uC0AC\uC774\uC5D0\uC11C\uB9CC \uC791\uC131\uD574\uC57C \uD569\uB2C8\uB2E4.\n// \uADF8 \uC678\uC758 \uC601\uC5ED\uC5D0\uC11C \uC791\uC131\uB41C \uC18C\uC2A4\uCF54\uB4DC\uB294 \uBAA8\uB450 \uC0AD\uC81C\uB429\uB2C8\uB2E4.";
export declare const LineSep = "// ===================================================================== //";
export declare const DefaultUserBlockHint = "// \uC5EC\uAE30\uC11C \uC18C\uC2A4\uCF54\uB4DC\uB97C \uC791\uC131\uD558\uC138\uC694...";
export declare const HeaderEnd = "// \uC5EC\uAE30 \uC544\uB798\uBD80\uD130\uB294 \uC790\uB3D9 \uC0DD\uC131\uB41C \uD30C\uC11C\uC785\uB2C8\uB2E4. \uAC74\uB4E4\uC9C0 \uB9C8\uC138\uC694.";
/**
 *
 */
export declare const ArrayParser = "\n/**\n * Thanks to bendrucker\n * \n * https://github.com/bendrucker/postgres-array\n * \n * typescript modified, static function added\n */\nclass ArrayParser {\n    static identity(value: string) { return value }\n    source: string\n    transform: (value: string) => any\n    position: number\n    entries: any[]\n    recorded: string[]\n    dimension: number\n    constructor(source: string, transform: (value: string) => any) {\n        this.source = source\n        this.transform = transform || ArrayParser.identity\n        this.position = 0\n        this.entries = []\n        this.recorded = []\n        this.dimension = 0\n    }\n\n    isEof() {\n        return this.position >= this.source.length\n    }\n\n    nextCharacter() {\n        const character = this.source[this.position++]\n        if (character === '\\\\') {\n            return {\n                value: this.source[this.position++],\n                escaped: true\n            }\n        }\n        return {\n            value: character,\n            escaped: false\n        }\n    }\n\n    record(character: string) {\n        this.recorded.push(character)\n    }\n\n    newEntry(includeEmpty?: boolean) {\n        let entry\n        if (this.recorded.length > 0 || includeEmpty) {\n            entry = this.recorded.join('')\n            if (entry === 'NULL' && !includeEmpty) {\n                entry = null\n            }\n            if (entry !== null) entry = this.transform(entry)\n            this.entries.push(entry)\n            this.recorded = []\n        }\n    }\n\n    consumeDimensions() {\n        if (this.source[0] === '[') {\n            while (!this.isEof()) {\n                const char = this.nextCharacter()\n                if (char.value === '=') break\n            }\n        }\n    }\n\n    parse(nested?: boolean) {\n        let character, parser, quote\n        this.consumeDimensions()\n        while (!this.isEof()) {\n            character = this.nextCharacter()\n            if (character.value === '{' && !quote) {\n                this.dimension++\n                if (this.dimension > 1) {\n                    parser = new ArrayParser(this.source.substring(this.position - 1), this.transform)\n                    this.entries.push(parser.parse(true))\n                    this.position += parser.position - 2\n                }\n            } else if (character.value === '}' && !quote) {\n                this.dimension--\n                if (!this.dimension) {\n                    this.newEntry()\n                    if (nested) return this.entries\n                }\n            } else if (character.value === '\"' && !character.escaped) {\n                if (quote) this.newEntry(true)\n                quote = !quote\n            } else if (character.value === ',' && !quote) {\n                this.newEntry()\n            } else {\n                this.record(character.value)\n            }\n        }\n        if (this.dimension !== 0) {\n            throw new Error('array dimension not balanced')\n        }\n        return this.entries\n    }\n}\n";
export declare const ClassParser = "\nclass ClassParser {\n    source: string\n    transform: [string, (value: string) => any][]\n    position: number\n    index: number\n    output: any\n    constructor(source: string, transform: [string, (value: string) => any][]) {\n        this.source = source\n        this.transform = transform\n        this.position = 0\n        this.output = null\n        this.index = 0\n    }\n\n    isEof() {\n        return this.position >= this.source.length\n    }\n\n    nextCharacter() {\n        const character = this.source[this.position++]\n        if (character === '\\\\') {\n            return {\n                value: this.source[this.position++],\n                escaped: true\n            }\n        }\n        return {\n            value: character,\n            escaped: false\n        }\n    }\n\n    parse() {\n        let character: { value: string, escaped: boolean };\n        let quoted = false\n        let quotedChar: '' | \"'\" | '\"' = ''\n        let buffer = ''\n        while (!this.isEof()) {\n            character = this.nextCharacter()\n            if (quoted) {\n                if (character.escaped === false && character.value === quotedChar) {\n                    quoted = false\n                    continue\n                }\n                buffer += character.value\n                continue\n            }\n            switch (character.value) {\n                case '(':\n                    if (this.output !== null) {\n                        throw new Error(\"parse failed\")\n                    }\n                    this.output = {}\n                    break\n                case ' ':\n                    break\n                case \"'\":\n                case '\"':\n                    if (buffer.length !== 0) {\n                        throw new Error(\"quoted before finished\")\n                    }\n                    quoted = true\n                    quotedChar = character.value\n                    break\n                case ')':\n                case ',':\n                    const [key, parser] = this.transform[this.index++]\n                    this.output[key] = parser(buffer)\n                    quoted = false\n                    quotedChar = ''\n                    buffer = ''\n                    break\n                default:\n                    if (quotedChar !== '') {\n                        throw new Error(\"push after quote end\")\n                    }\n                    buffer += character.value\n                    break\n            }\n        }\n        return this.output\n    }\n}\n";
